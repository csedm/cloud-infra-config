ansible_python_interpreter: auto_silent
common_roles: [
  "common",
]
# env_type generally comes from the ec2 dynamic inventory, however in the case of
# packer it must be passed in manually with -e based on the build_type
# the following lines currently fail on MacOS without the following environment variable set:
# export OBJC_DISABLE_INITIALIZE_FORK_SAFETY=YES
# ref: https://github.com/ansible/ansible/issues/32499
common_user_information_base: "{{ lookup('amazon.aws.ssm_parameter', '/ansible/' ~ env_type ~ '/common_user_information_base', default=([])) | from_yaml }}"
common_group_information_base: "{{ lookup('amazon.aws.ssm_parameter', '/ansible/' ~ env_type ~ '/common_group_information_base', default=([])) | from_yaml }}"
common_package_information_base:
  - name: htop
    state: present
    role_presence:
      - common
    packages:
      Alpine:
      Debian:
      RedHat:
  - name: tree
    state: present
    role_presence:
      - common
    packages:
      Alpine:
      Debian:
      OpenBSD:
      RedHat:
  - name: vim
    state: present
    role_presence:
      - mgmt
    packages:
      Alpine:
      Debian:
      OpenBSD: vim--no_x11
  - name: ansible
    state: present
    role_presence:
      - mgmt
    packages:
      Debian:
      OpenBSD:
      RedHat:
  - name: ansible-lint
    state: present
    role_presence:
      - mgmt
    packages:
      Debian:
      OpenBSD:
      RedHat:
  - name: golang
    state: present
    role_presence:
      - mgmt
    packages:
      Alpine: go
      Debian: golang-go
  - name: nmap
    state: present
    role_presence:
      - mgmt
    packages:
      Alpine:
      Debian:
      OpenBSD:
      RedHat:
  - name: ndiff
    state: present
    role_presence:
      - mgmt
    packages:
      Debian:
      RedHat:
  - name: unzip
    state: present
    role_presence:
      - mgmt
    packages:
      Debian:
  - name: terraform
    state: present
    role_presence:
      - mgmt
    packages:
      OpenBSD:
  - name: bash
    state: present
    role_presence:
      - mgmt
    packages:
      OpenBSD:
  - name: zsh
    state: present
    role_presence:
      - mgmt
    packages:
      Debian:
      RedHat:
  - name: git
    state: present
    role_presence:
      - mgmt
    packages:
      Alpine:
      Debian:
      RedHat:
  - name: pip
    state: present
    role_presence:
      - mgmt
    packages:
      Alpine: py3-pip
      Debian: python3-pip
  # Packages to remove
  - name: popularity-contest
    state: absent
    role_presence:
      - common
    packages:
      Debian:

effective_roles: "{{ common_roles + (ansible_roles | default([])) }}"

# Create dynamic lists of groups, users, ssh keys, and packages.
# Intersect list of roles applicable for the host with the master list of groups, users, keys, packages
dynamic_required_groups_list: >-
  [{% for g in common_group_information_base
      if g.role_presence | intersect(effective_roles) | length > 0 %}
    {{ g | to_json }}{% if not loop.last %},{% endif %}
  {% endfor %}]

dynamic_required_users_list: >-
  [{% for u in common_user_information_base
      if u.role_presence | intersect(effective_roles) | length > 0 %}
    {{ u | to_json }}{% if not loop.last %},{% endif %}
  {% endfor %}]

dynamic_required_ssh_authorized_keys_list: >-
  [{% for u in common_user_information_base
      if u.role_presence | intersect(effective_roles) | length > 0
      and u.sshpubkeys is defined and u.sshpubkeys | length > 0 %}
    {
      "name": "{{ u.name }}",
      "sshpubkeys": {{ u.sshpubkeys | to_json }},
      "sshpubkeys_exclusive": {{ u.sshpubkeys_exclusive | default(false) | to_json }}
    }{% if not loop.last %},{% endif %}
  {% endfor %}]

dynamic_required_sudo_users: >-
  [{% for u in common_user_information_base
      if u.role_presence | intersect(effective_roles) | length > 0
      and u.sudo_state is defined %}
    {
      "name": "{{ u.name }}",
      "state": "{{ u.sudo_state }}"
    }{% if not loop.last %},{% endif %}
  {% endfor %}]

dynamic_required_sudo_groups: >-
  [{% for g in common_group_information_base
      if g.role_presence | intersect(effective_roles) | length > 0
      and g.sudo_state is defined %}
    {
      "name": "{{ g.name }}",
      "state": "{{ g.sudo_state }}"
    }{% if not loop.last %},{% endif %}
  {% endfor %}]

dynamic_required_packages_list: >-
  [{% for pkg in common_package_information_base
      if pkg.role_presence | intersect(effective_roles) | length > 0
      and pkg.packages[ansible_os_family] is defined %}
    {
      "name": "{{ (pkg.packages[ansible_os_family] is not none and pkg.packages[ansible_os_family] or pkg.name) }}",
      "state": "{{ pkg.state | default('present') }}"
    }{% if not loop.last %},{% endif %}
  {% endfor %}]

# Security settings for common role
disable_ssh_password_auth: true
